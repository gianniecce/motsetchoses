ukAllsub_act_summary %>% select(matches('act')) %>% summarise_each(funs(mean))
ukAllsub_act_summary$act_2
ukAllsub_act_summary$act_2 %>% mean()
ukAllsub_act_summary %>% group_by(day) %>%  select(day, matches('act')) %>% summarise_each(funs(mean))
servr::jekyll(command = '/Users/giacomovagni/.rvm/gems/ruby-2.2.1/wrappers/jekyll build')
servr::jekyll(command = '/Users/giacomovagni/.rvm/gems/ruby-2.2.1/wrappers/jekyll build')
servr::jekyll(command = '/Users/giacomovagni/.rvm/gems/ruby-2.2.1/wrappers/jekyll build')
servr::jekyll(command = '/Users/giacomovagni/.rvm/gems/ruby-2.2.1/wrappers/jekyll build')
servr::jekyll(command = '/Users/giacomovagni/.rvm/gems/ruby-2.2.1/wrappers/jekyll build')
servr::jekyll(command = '/Users/giacomovagni/.rvm/gems/ruby-2.2.1/wrappers/jekyll build')
servr::jekyll(command = '/Users/giacomovagni/.rvm/gems/ruby-2.2.1/wrappers/jekyll build')
servr::jekyll(command = '/Users/giacomovagni/.rvm/gems/ruby-2.2.1/wrappers/jekyll build')
servr::jekyll(command = '/Users/giacomovagni/.rvm/gems/ruby-2.2.1/wrappers/jekyll build')
servr::jekyll(command = '/Users/giacomovagni/.rvm/gems/ruby-2.2.1/wrappers/jekyll build')
servr::jekyll(command = '/Users/giacomovagni/.rvm/gems/ruby-2.2.1/wrappers/jekyll build')
servr::jekyll(command = '/Users/giacomovagni/.rvm/gems/ruby-2.2.1/wrappers/jekyll build')
servr::jekyll(command = '/Users/giacomovagni/.rvm/gems/ruby-2.2.1/wrappers/jekyll build')
servr::jekyll(command = '/Users/giacomovagni/.rvm/gems/ruby-2.2.1/wrappers/jekyll build')
servr::jekyll(command = '/Users/giacomovagni/.rvm/gems/ruby-2.2.1/wrappers/jekyll build')
servr::jekyll(command = '/Users/giacomovagni/.rvm/gems/ruby-2.2.1/wrappers/jekyll build')
servr::jekyll(command = '/Users/giacomovagni/.rvm/gems/ruby-2.2.1/wrappers/jekyll build')
servr::jekyll(command = '/Users/giacomovagni/.rvm/gems/ruby-2.2.1/wrappers/jekyll build')
servr::jekyll(command = '/Users/giacomovagni/.rvm/gems/ruby-2.2.1/wrappers/jekyll build')
servr::jekyll(command = '/Users/giacomovagni/.rvm/gems/ruby-2.2.1/wrappers/jekyll build')
```{r}
ukAllsub
ukAllsub %>% head()
servr::jekyll(command = '/Users/giacomovagni/.rvm/gems/ruby-2.2.1/wrappers/jekyll build')
servr::jekyll(command = '/Users/giacomovagni/.rvm/gems/ruby-2.2.1/wrappers/jekyll build')
servr::jekyll(command = '/Users/giacomovagni/.rvm/gems/ruby-2.2.1/wrappers/jekyll build')
servr::jekyll(command = '/Users/giacomovagni/.rvm/gems/ruby-2.2.1/wrappers/jekyll build')
servr::jekyll(command = '/Users/giacomovagni/.rvm/gems/ruby-2.2.1/wrappers/jekyll build')
servr::jekyll(command = '/Users/giacomovagni/.rvm/gems/ruby-2.2.1/wrappers/jekyll build')
servr::jekyll(command = '/Users/giacomovagni/.rvm/gems/ruby-2.2.1/wrappers/jekyll build')
servr::jekyll(command = '/Users/giacomovagni/.rvm/gems/ruby-2.2.1/wrappers/jekyll build')
servr::jekyll(command = '/Users/giacomovagni/.rvm/gems/ruby-2.2.1/wrappers/jekyll build')
servr::jekyll(command = '/Users/giacomovagni/.rvm/gems/ruby-2.2.1/wrappers/jekyll build')
servr::jekyll(command = '/Users/giacomovagni/.rvm/gems/ruby-2.2.1/wrappers/jekyll build')
servr::jekyll(command = '/Users/giacomovagni/.rvm/gems/ruby-2.2.1/wrappers/jekyll build')
servr::jekyll(command = '/Users/giacomovagni/.rvm/gems/ruby-2.2.1/wrappers/jekyll build')
servr::jekyll(command = '/Users/giacomovagni/.rvm/gems/ruby-2.2.1/wrappers/jekyll build')
servr::jekyll(command = '/Users/giacomovagni/.rvm/gems/ruby-2.2.1/wrappers/jekyll build')
servr::jekyll(command = '/Users/giacomovagni/.rvm/gems/ruby-2.2.1/wrappers/jekyll build')
servr::jekyll(command = '/Users/giacomovagni/.rvm/gems/ruby-2.2.1/wrappers/jekyll build')
---
layout: post
title:  "Compute mean for activities"
categories: [jekyll]
tags: [mtus]
---
<span class='newthought'>This post</span> will demonstrate how to simply calcualte mean time of different activities from a *wide format* dataset.
- Load the libraries and data
```{r, warning=FALSE, message=FALSE}
library(plyr)
library(dplyr)
library(tidyr)
library(mtusRlocal)
library(knitr)
library(reshape2)
library(xtable)
load('/Users/giacomovagni/site/motsetchoses/_data/ukAllsub.RData')
```
ukAllsub
load('/Users/giacomovagni/site/motsetchoses/_data/dtaSimple.RData')
dtaSimple
load('/Users/giacomovagni/site/motsetchoses/_data/dta.RData')
dta
load("/Users/giacomovagni/Rprojects/togetherness/data/uk2015/uk2015.RData")
uk2015
uk2015$serial
filter(uk2015, serial == 2239803)
500 + 700
TimeClock(500 + 700 )
TimeClock(500 + 300)
TimeClock(500 + 400)
TimeClock(500 + 400 + 100 + 300)
TimeClock(500 + 400 + 100 + 300 + 400)
TimeClock(500 + 400 + 100 + 300 + 250)
TimeClock(500 + 400 + 100 + 300 + 230)
TimeClock(500 + 400 + 100 + 300 + 220)
TimeClock(500 + 400 + 100 + 300 + 200)
TimeClock(500 + 400 + 100 + 300 + 180)
TimeClock(500 + 400 + 100 + 300 + 140)
TimeClock(300 + 500 + 200)
TimeClock(300 + 500 + 200 + 400)
TimeClock(300 + 500 + 200 + 400 + 40)
write.csv('/Users/giacomovagni/site/motsetchoses/_data/dtaSpells.csv')
read.csv('/Users/giacomovagni/site/motsetchoses/_data/dtaSpells.csv')
dta = read.csv('/Users/giacomovagni/site/motsetchoses/_data/dtaSpells.csv')
kable(dta)
servr::jekyll(command = '/Users/giacomovagni/.rvm/gems/ruby-2.2.1/wrappers/jekyll build')
kable(dta)
kable(dta, align = 'c')
servr::jekyll(command = '/Users/giacomovagni/.rvm/gems/ruby-2.2.1/wrappers/jekyll build')
```{r, results='asis', echo=FALSE}
kable(dta, align = 'c')
```
```{r}
dta
dta[rep(1:nrow(dta), dta$duration), ] %>%
select(-duration, -variable) %>%
group_by(idind, day) %>%
mutate( Time = 1:n())
dta[rep(1:nrow(dta), dta$duration), ] %>%
select(-duration) %>%
group_by(idind, day) %>%
mutate( Time = 1:n())
dta[rep(1:nrow(dta), dta$duration), ] %>%
select(-duration) %>%
group_by(id, day) %>%
mutate( Time = 1:n())
dta$duration
dta$duration / 40
install.packages('schoolmath')
library('schoolmath')
dta$duration
gcd(500, 400)
dta$duration / 100
dta$duration
dta$duration
l = length(dta$duration)
l
for(i in 1:l){
gcd(dta$duration[i], dta$duration[i-1])
}
for(i in 1:l){
gcd(dta$duration[i-1], dta$duration[i])
}
dta$duration
for(i in 2:l){
gcd(dta$duration[i-1], dta$duration[i])
}
for(i in 2:l){
print ( gcd(dta$duration[i-1], dta$duration[i]) )
}
dta$duration / 20
v = array(0, l)
v
for(i in 2:l){
v = gcd(dta$duration[i-1], dta$duration[i])
}
v
l = length(dta$duration)
v = array(0, l)
for(i in 2:l){
v[i] = gcd(dta$duration[i-1], dta$duration[i])
}
v
dta
v
for(i in 1:l){
v[i] = gcd(dta$duration[i], dta$duration[i+1])
}
v
min(v)
dta$duration / min(v)
dta[rep(1:nrow(dta), dta$duration), ] %>%
select(-duration) %>%
group_by(id, day) %>%
mutate( Time = 1:n())
dtaPP = dta[rep(1:nrow(dta), dta$duration), ] %>%
select(-duration) %>%
group_by(id, day) %>%
mutate( Time = 1:n())
kable(dtaPP)
kable(dtaPP [1:10, ])
dta$duration / min(v)
min(v)
dta$duration = dta$duration / min(v)
dta[rep(1:nrow(dta), dta$duration), ] %>%
select(-duration) %>%
group_by(id, day) %>%
mutate( Time = 1:n())
dtaPP = dta[rep(1:nrow(dta), dta$duration), ] %>%
select(-duration) %>%
group_by(id, day) %>%
mutate( Time = 1:n())
dtaPP
dtaPP %>% group_by(id, day) %>% summarise(max(Time))
72 * 20
dtaPP %>% spread()
dtaPP
dtaPP %>% spread(activities, Time)
dtaPP
dtaPP %>% spread(Time, activities)
dtaPP %>% select(-epnum) %>% spread(Time, activities)
---
layout: post
title:  "Data Format"
categories: [jekyll]
tags: [mtus]
---
<span class='newthought'>This post</span> will demonstrate how to simply calcualte mean time of different activities from a *wide format* dataset.
- Load the libraries and data
```{r, warning=FALSE, message=FALSE}
library(plyr)
library(dplyr)
library(tidyr)
library(mtusRlocal)
library(knitr)
library(reshape2)
library(xtable)
library('schoolmath')
dta = read.csv('/Users/giacomovagni/site/motsetchoses/_data/dtaSpells.csv')
```
```{r, results='asis', echo=FALSE}
kable(dta, align = 'c')
```
```{r}
dtaPP = dta[rep(1:nrow(dta), dta$duration), ] %>%
select(-duration) %>%
group_by(id, day) %>%
mutate( Time = 1:n())
```
```{r, results='asis', echo=FALSE}
kable(dtaPP [1:10, ])
```
```{r, results='asis', echo=FALSE}
dtaPP %>% select(-epnum) %>% spread(Time, activities)
```
servr::jekyll(command = '/Users/giacomovagni/.rvm/gems/ruby-2.2.1/wrappers/jekyll build')
kable( dtaWide , align = 'c')
dtaWide = dtaPP %>% select(-epnum) %>% spread(Time, activities)
kable( dtaWide , align = 'c')
kable( dtaWide [, 1:10] , align = 'c')
kable( dtaWide [, 1:12] , align = 'c')
dtaWide
servr::jekyll(command = '/Users/giacomovagni/.rvm/gems/ruby-2.2.1/wrappers/jekyll build')
---
layout: post
title:  "Data Format"
categories: [jekyll]
tags: [mtus]
---
<span class='newthought'>This post</span> will demonstrate how to simply calcualte mean time of different activities from a *wide format* dataset.
- Load the libraries and data
```{r, warning=FALSE, message=FALSE}
library(plyr)
library(dplyr)
library(tidyr)
library(mtusRlocal)
library(knitr)
library(reshape2)
library(xtable)
library('schoolmath')
dta = read.csv('/Users/giacomovagni/site/motsetchoses/_data/dtaSpells.csv')
```
```{r, results='asis', echo=FALSE}
kable(dta, align = 'c')
```
```{r}
dtaPP = dta[rep(1:nrow(dta), dta$duration), ] %>%
select(-duration) %>%
group_by(id, day) %>%
mutate( Time = 1:n())
```
Let's look at the first 10 entries
```{r, results='asis', echo=FALSE}
kable(dtaPP [1:10, ], align = 'c')
```
The maximum time per day is
```{r}
dtaPP %>% group_by(id, day) %>% summarise(max(Time))
```
which means that we have created a one minute interval dataset, known as **Long Person-Period**:
This code enables to transform the long file into a **Wide Sequence** file.
```{r}
dtaWide = dtaPP %>% select(-epnum) %>% spread(Time, activities)
```
The 10 first sequence episodes look like this :
```{r, results='asis', echo=FALSE}
kable( dtaWide [, 1:12] , align = 'c')
```
dta
l = length(dta$duration)
v = array(0, l)
l
for(i in 1:l){
v[i] = gcd(dta$duration[i], dta$duration[i+1])
}
min(v)
dta$duration
dta$duration
for(i in 1:l){
v[i] = gcd(dta$duration[i], dta$duration[i+1])
}
for(i in 2:l){
v[i] = gcd(dta$duration[i], dta$duration[i-1])
}
min(v)
v
?gcd
dta$duration
dtaPP = dta[rep(1:nrow(dta), dta$duration), ] %>%
select(-duration) %>%
group_by(id, day) %>%
mutate( Time = 1:n())
```{r}
dtaPP %>% group_by(id, day) %>% summarise(max(Time))
72 * 20
dtaPP = dta[rep(1:nrow(dta), dta$duration), ] %>%
select(-duration) %>%
group_by(id, day) %>%
mutate( Time = 1:n())
servr::jekyll(command = '/Users/giacomovagni/.rvm/gems/ruby-2.2.1/wrappers/jekyll build')
---
layout: post
title:  "Data Format"
categories: [jekyll]
tags: [mtus]
---
<span class='newthought'>This post</span> will demonstrate how to simply calcualte mean time of different activities from a *wide format* dataset.
- Load the libraries and data
```{r, warning=FALSE, message=FALSE}
library(plyr)
library(dplyr)
library(tidyr)
library(mtusRlocal)
library(knitr)
library(reshape2)
library(xtable)
library('schoolmath')
dta = read.csv('/Users/giacomovagni/site/motsetchoses/_data/dtaSpells.csv')
```
```{r, results='asis', echo=FALSE}
kable(dta, align = 'c')
```
```{r}
dtaPP = dta[rep(1:nrow(dta), dta$duration), ] %>%
select(-duration) %>%
group_by(id, day) %>%
mutate( Time = 1:n())
```
Let's look at the first 10 entries
```{r, results='asis', echo=FALSE}
kable(dtaPP [1:10, ], align = 'c')
```
The maximum time per day is
```{r}
dtaPP %>% group_by(id, day) %>% summarise(max(Time))
```
which means that we have created a one minute interval dataset, known as **Long Person-Period**:
This code enables to transform the long file into a **Wide Sequence** file.
```{r}
dtaWide = dtaPP %>% select(-epnum) %>% spread(Time, activities)
```
The 10 first sequence episodes look like this :
```{r, results='asis', echo=FALSE}
kable( dtaWide [, 1:12] , align = 'c')
```
## Change the interval time
Find the greatest common divisor
```{r}
l = length(dta$duration)
v = array(0, l)
for(i in 2:l){
v[i] = gcd(dta$duration[i], dta$duration[i-1])
}
min(v)
v
v
for(i in 2:l){
v[i] = gcd(dta$duration[i-1], dta$duration[i])
}
min(v)
v
dta$duration
gcd(4, 4)
gcd(100, 100)
gcd
gcd(500, 400)
gcd(400, 500)
for(i in 2:l){
v[i] = gcd(dta$duration[i-1], dta$duration[i])
}
min(v)
v
for(i in 2:l){
v[i] = gcd(dta$duration[i], dta$duration[i-1])
}
min(v)
v
dta$duration
l = length(dta$duration) - 1
v = array(0, l)
for(i in 2:l){
v[i] = gcd(dta$duration[i], dta$duration[i-1])
}
v
for(i in 2:l){
v[i] = gcd(dta$duration[i-1], dta$duration[i])
}
v
l = length(dta$duration)
v = array(0, l)
for(i in 2:l){
v[i] = gcd(dta$duration[i-1], dta$duration[i])
}
v
lag(dta$duration)
head(dta$duration)
dta$duration
dta$duration - head(dta$duration)
dta$duration
head(dta$duration)
gcd( dta$duration, head(dta$duration) )
l = length(dta$duration)
v = array(0, l)
dta$duration[2-1]
dta$duration[2]
dta$duration[3-1]
for(i in 2:l){
v[i] = gcd(dta$duration[i], dta$duration[i])
}
v
dta$duration
for(i in 2:l){
v[i] = gcd(dta$duration[i], dta$duration[i+1])
}
v
for(i in 2:l){
v[i] = gcd(dta$duration[i], dta$duration[i-1])
}
v
dta$duration
min(v[-1])
minV = min(v[-1])
dta$duration = dta$duration / minV
```{r}
l = length(dta$duration)
v = array(0, l)
for(i in 2:l){
v[i] = gcd(dta$duration[i], dta$duration[i-1])
}
minV = min(v[-1])
dta$duration = dta$duration / minV
```
```{r}
dtaPP = dta[rep(1:nrow(dta), dta$duration), ] %>%
select(-duration) %>%
group_by(id, day) %>%
mutate( Time = 1:n())
```
The new Long Person Period file has now `72` episodes, which is equals to `1440` when multiplied by `20`
```{r}
dtaPP %>% group_by(id, day) %>% summarise(max(Time))
72 * 20
```
<span class='newthought'>This post</span> will demonstrate how to simply calcualte mean time of different activities from a *wide format* dataset.
- Load the libraries and data
```{r, warning=FALSE, message=FALSE}
library(plyr)
library(dplyr)
library(tidyr)
library(mtusRlocal)
library(knitr)
library(reshape2)
library(xtable)
library('schoolmath')
dta = read.csv('/Users/giacomovagni/site/motsetchoses/_data/dtaSpells.csv')
```
```{r, results='asis', echo=FALSE}
kable(dta, align = 'c')
```
```{r}
dtaPP = dta[rep(1:nrow(dta), dta$duration), ] %>%
select(-duration) %>%
group_by(id, day) %>%
mutate( Time = 1:n())
```
Let's look at the first 10 entries
```{r, results='asis', echo=FALSE}
kable(dtaPP [1:10, ], align = 'c')
```
The maximum time per day is
```{r}
dtaPP %>% group_by(id, day) %>% summarise(max(Time))
```
which means that we have created a one minute interval dataset, known as **Long Person-Period**:
This code enables to transform the long file into a **Wide Sequence** file.
```{r}
dtaWide = dtaPP %>% select(-epnum) %>% spread(Time, activities)
```
The 10 first sequence episodes look like this :
```{r, results='asis', echo=FALSE}
kable( dtaWide [, 1:12] , align = 'c')
```
## Change the interval time
Find the greatest common divisor
```{r}
l = length(dta$duration)
v = array(0, l)
for(i in 2:l){
v[i] = gcd(dta$duration[i], dta$duration[i-1])
}
minV = min(v[-1])
dta$duration = dta$duration / minV
```
minV
dta
dtaPP = dta[rep(1:nrow(dta), dta$duration), ] %>%
select(-duration) %>%
group_by(id, day) %>%
mutate( Time = 1:n())
```
dtaPP %>% group_by(id, day) %>% summarise(max(Time))
dtaPP
dtaPP %>% group_by(id, day) %>% summarise(max(Time))
dtaPP
dtaPP %>% group_by(id, day) %>% summarise(max(Time))
72 * 20
servr::jekyll(command = '/Users/giacomovagni/.rvm/gems/ruby-2.2.1/wrappers/jekyll build')
