{
    "contents" : "---\nlayout: post\ntitle:  \"A Tufte-style Jekyll blog powered by servr and knitr\"\ncategories: [jekyll, rstats]\ntags: [knitr, servr, httpuv, websocket]\n---\n\n<span class='newthought'>This post</span> demonstrates [my fork](http://github.com/cpsievert/knitr-jekyll) of Yihui's [knitr-jekyll](https://github.com/yihui/knitr-jekyll) which tweaks the default layout to resemble [tufte-jekyll](https://github.com/clayh53/tufte-jekyll). As Yihui mentions in his [knitr-jekyll blog post](http://yihui.name/knitr-jekyll/2014/09/jekyll-with-knitr.html) (which I _highly_ recommend reading), GitHub Pages does not support arbitrary Jekyll plugins, but I've managed to remove tufte-jekyll's dependency on custom plugins via custom [knitr output hooks](http://yihui.name/knitr/hooks/). Not only does this allow GitHub Pages to build and host this template automagically, but it also fixes [tufte-jekyll's problem with figure paths](https://github.com/clayh53/tufte-jekyll#which-brings-me-to-sorrow-and-shame). \n\nThe rest of this post shows you how to use these custom hooks and some other useful things specific to this template (at some point, you might also want the [source for this post](https://raw.githubusercontent.com/cpsievert/knitr-jekyll/gh-pages/_source/2015-04-20-jekyll-tufte-servr.Rmd))\n\n```{r setup, echo = FALSE, message = FALSE}\nknitr::opts_chunk$set(message = FALSE, cache = TRUE, fig.height = 4)\n```\n\n### Figures\n\nBy default, the `fig.width` [chunk option](http://yihui.name/knitr/options/) is equal to 7 inches. Assuming the zoom of your browser window is at 100%, that translates to about 3/4 of the textwidth.\n\n```{r skinny, fig.cap = \"Figure 1: A nice plot that is not quite wide enough. Note that this figure caption was created using the `fig.cap` chunk option\"}\nlibrary(ggplot2)\np <- ggplot(diamonds, aes(carat)) \np + geom_histogram()\n```\n\nIf we increase `fig.width` to a ridiculous number, say 20 inches, it will still be constrained to the text width, even by changing `fig.width` to 20 inches. \n\n```{r wide, fig.width = 20, fig.cap = \"Figure 2: The `fig.height` for this chunk is same as Figure 1, but the `fig.width` is now 20. Since the width is constrained by the text width, the figure is shrunken quite a bit.\"}\np + geom_histogram(aes(y = ..density..))\n```\n\nBy constraining the figure width, it will ensure that figure captions (set via `fig.cap`) appear correctly in the side margin. If you don't want to restrict the final figure width, set the `fig.fullwidth` chunk option equal to `TRUE`. In this case, the figure caption is placed in the side margin below the figure.\n\n```{r full, fig.width = 20, fig.fullwidth = TRUE, fig.cap = \"Figure 3: Full width plot\"}\np + geom_point(aes(y = price), alpha = 0.2) + \n  facet_wrap(~cut, nrow = 1, scales = \"free_x\") +\n  geom_smooth(aes(y = price, fill = cut))\n```\n\nTo place figures in the margin, set the `fig.margin` chunk option equal to `TRUE`.\n\n```{r margin, fig.margin = TRUE, fig.cap = \"Figure 4: useR logo\"}\ntmp <- tempfile()\nuser <- \"http://user2014.stat.ucla.edu/images/useR-large.png\"\ndownload.file(user, tmp)\nimg <- png::readPNG(tmp)\nplot(0:1, type = 'n', xlab = \"\", ylab = \"\")\nlim <- par()\nrasterImage(img, lim$usr[1], lim$usr[3], lim$usr[2], lim$usr[4])\nunlink(tmp)\n```\n\n## Sizing terminal output\n \nThe default `R` terminal output width is 80, which is a bit too big for the styling of this blog, but a width of 55 works pretty well:\n\n```{r}\noptions(width = 55, digits = 3)\n(x <- rnorm(40))\n```\n\n## Mathjax\n\nIf you want inline math rendering, put `$$ math $$` inline. For example, $$ \\Gamma(\\alpha) = (\\alpha - 1)!$$. If you want it on it's own line, do something like:\n\n{% highlight latex %}\n$$\nx = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.\n$$\n{% endhighlight %}\n\nwhich results in\n\n$$\nx = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}.\n$$\n\n## Margin notes\n\n<span class='marginnote'> \n<img class=\"fullwidth\" src=\"http://i.imgur.com/NCMxz5G.gif\">\nMuch margin. So excite.\n</span>\n\nPut stuff in the side margin using the `<span>` HTML tag with a class of 'marginnote':\n\n{% highlight html %}\n<span class='marginnote'> \n  Anything here will appear in side margin \n</span>\n{% endhighlight %}\n\nAnother (less cute) example of margin notes is to add a table caption. In fact, the figure captions above are just margin notes.\n\n<span class='marginnote'> \nTable 1: Output from a simple linear regression in tabular form.\n</span>\n\n```{r echo = FALSE}\nm <- lm(vs ~ wt, mtcars)\nknitr::kable(broom::tidy(m), format = \"markdown\")\n```\n\n\n## Sidenotes\n\nSimilar to a 'marginnote' is a 'sidenote'<sup class='sidenote-number'> 1 </sup> which works like this\n\n<span class='sidenote'>\n  <sup class='sidenote-number'> 1 </sup> \n  Sidenotes are kind of like footnotes that appear in the side margin.\n</span> \n\n{% highlight html %}\n<sup class='sidenote-number'> 1 </sup>\n<span class='sidenote'>\n  <sup class='sidenote-number'> 1 </sup> \n  Sidenotes are kind of like footnotes that appear in the side margin.\n</span> \n{% endhighlight %}\n\nUnfortunately, this is a lot of HTML markup, but of course[^2], you can also do footnotes, so that might be a better option.\n\n[^2]: I hate it when people say \"of course\" as though this is obvious everyone.\n\n## Contact me\n\nIf you find any issues or want to help improve the implementation, [please let me know](https://github.com/cpsievert/knitr-jekyll/issues/new)!\n\n## Session Information\n\n```{r, echo = FALSE}\nsessionInfo()\n```\n",
    "created" : 1458302638597.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1663354164",
    "id" : "E65F5A50",
    "lastKnownWriteTime" : 1439637412,
    "path" : "~/site/motsetchoses/_source/2015-04-20-jekyll-tufte-servr.Rmd",
    "project_path" : "_source/2015-04-20-jekyll-tufte-servr.Rmd",
    "properties" : {
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "type" : "r_markdown"
}